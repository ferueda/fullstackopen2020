{"version":3,"sources":["components/Notes.js","components/NoteForm.js","components/FilterNotes.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","Notes","notes","toggleImportanceOf","map","key","id","NoteForm","addNote","newNote","handleNoteChange","onSubmit","type","placeholder","value","onChange","FilterNotes","newFilter","handleFilterChange","getAll","a","axios","get","request","data","create","newObject","post","update","put","Notification","notification","message","Footer","style","color","fontStyle","fontSize","padding","backgroundColor","textAlign","App","useState","setNewNote","setNotes","showAll","setShowAll","setNewFilter","setNotification","setMessage","useEffect","noteService","then","initialNotes","notesToShow","filter","toLowerCase","includes","e","preventDefault","noteObject","returnedNotes","setTimeout","target","find","n","changedNote","returnedNote","catch","error","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4d66b3fa.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n  const label = note.important ? 'make not important' : 'make important';\r\n  return (\r\n    <li className='note'>\r\n      <span>\r\n        {note.content} [\r\n        {note.important ? <strong>Important</strong> : 'Not important'}]\r\n      </span>\r\n      <button onClick={toggleImportance}>{label}</button>\r\n    </li>\r\n  );\r\n};\r\n\r\nconst Notes = ({ notes, toggleImportanceOf }) => {\r\n  return (\r\n    <ul>\r\n      {notes.map(note => (\r\n        <Note\r\n          key={note.id}\r\n          note={note}\r\n          toggleImportance={() => {\r\n            toggleImportanceOf(note.id);\r\n          }}\r\n        />\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default Notes;\r\n","import React from 'react';\r\n\r\nconst NoteForm = ({ addNote, newNote, handleNoteChange }) => {\r\n  return (\r\n    <div>\r\n      <form onSubmit={addNote}>\r\n        <input\r\n          type='text'\r\n          placeholder='Note title...'\r\n          value={newNote}\r\n          onChange={handleNoteChange}\r\n        />\r\n        <button type='submit'>Add note</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NoteForm;\r\n","import React from 'react';\r\n\r\nconst FilterNotes = ({ newFilter, handleFilterChange }) => {\r\n  return (\r\n    <input\r\n      type='text'\r\n      placeholder='Filter notes...'\r\n      value={newFilter}\r\n      onChange={handleFilterChange}\r\n    />\r\n  );\r\n};\r\n\r\nexport default FilterNotes;\r\n","import axios from 'axios';\r\n\r\nconst baseUrl = '/api/notes';\r\n\r\nconst getAll = async () => {\r\n  const request = await axios.get(baseUrl);\r\n  return request.data;\r\n};\r\n\r\nconst create = async newObject => {\r\n  const request = await axios.post(baseUrl, newObject);\r\n  return request.data;\r\n};\r\n\r\nconst update = async (id, newObject) => {\r\n  const request = await axios.put(`${baseUrl}/${id}`, newObject);\r\n  return request.data;\r\n};\r\n\r\nexport default {\r\n  getAll,\r\n  create,\r\n  update\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport Notes from './components/Notes';\r\nimport NoteForm from './components/NoteForm';\r\nimport FilterNotes from './components/FilterNotes';\r\nimport noteService from './services/notes';\r\n\r\nconst Notification = ({ notification, message }) => {\r\n  if (notification === null) {\r\n    return null;\r\n  } else if (notification === 'success') {\r\n    return <div className='success'>{message}</div>;\r\n  } else if (notification === 'error') {\r\n    return <div className='error'>{message}</div>;\r\n  }\r\n};\r\n\r\nconst Footer = () => {\r\n  const footerStyle = {\r\n    color: 'green',\r\n    fontStyle: 'italic',\r\n    fontSize: 16,\r\n    padding: 10,\r\n    backgroundColor: 'lightgrey',\r\n    textAlign: 'center'\r\n  };\r\n\r\n  return (\r\n    <div style={footerStyle}>\r\n      <br />\r\n      <em>\r\n        Note app, Department of Computer Science, University of Helsinki 2020\r\n      </em>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst App = () => {\r\n  const [newNote, setNewNote] = useState('');\r\n  const [notes, setNotes] = useState([]);\r\n  const [showAll, setShowAll] = useState(true);\r\n  const [newFilter, setNewFilter] = useState('');\r\n  const [notification, setNotification] = useState(null);\r\n  const [message, setMessage] = useState('');\r\n\r\n  useEffect(() => {\r\n    noteService.getAll().then(initialNotes => {\r\n      setNotes(initialNotes);\r\n    });\r\n  }, []);\r\n\r\n  const handleNoteChange = e => {\r\n    setNewNote(e.target.value);\r\n  };\r\n\r\n  const handleFilterChange = e => {\r\n    setNewFilter(e.target.value);\r\n    setShowAll(false);\r\n  };\r\n\r\n  const toggleImportanceOf = id => {\r\n    const note = notes.find(n => n.id === id);\r\n    const changedNote = { ...note, important: !note.important };\r\n\r\n    noteService\r\n      .update(id, changedNote)\r\n      .then(returnedNote => {\r\n        setNotes(notes.map(note => (note.id !== id ? note : returnedNote)));\r\n        setNotification('success');\r\n        setMessage(`Note ${note.id} was updated successfully`);\r\n        setTimeout(() => {\r\n          setNotification(null);\r\n        }, 2000);\r\n      })\r\n      .catch(error => {\r\n        setNotification('error');\r\n        setMessage(`Note ${note.id} was already removed from server`);\r\n        setTimeout(() => {\r\n          setNotification(null);\r\n        }, 2000);\r\n        setNotes(notes.filter(n => n.id !== id));\r\n      });\r\n  };\r\n\r\n  const addNote = e => {\r\n    e.preventDefault();\r\n\r\n    if (newNote !== '') {\r\n      const noteObject = {\r\n        content: newNote\r\n      };\r\n\r\n      noteService.create(noteObject).then(returnedNotes => {\r\n        setNotes(returnedNotes);\r\n        setNewNote('');\r\n        setNotification('success');\r\n        setMessage('Note added successfully!');\r\n        setTimeout(() => {\r\n          setNotification(null);\r\n        }, 2000);\r\n      });\r\n    }\r\n  };\r\n\r\n  const notesToShow = showAll\r\n    ? notes\r\n    : notes.filter(note =>\r\n        note.content.toLowerCase().includes(newFilter.toLowerCase())\r\n      );\r\n\r\n  return (\r\n    <div>\r\n      <h1>Notes</h1>\r\n      <Notification notification={notification} message={message} />\r\n      <NoteForm\r\n        addNote={addNote}\r\n        newNote={newNote}\r\n        handleNoteChange={handleNoteChange}\r\n      />\r\n      <FilterNotes\r\n        newFilter={newFilter}\r\n        handleFilterChange={handleFilterChange}\r\n      />\r\n      <Notes notes={notesToShow} toggleImportanceOf={toggleImportanceOf} />\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}